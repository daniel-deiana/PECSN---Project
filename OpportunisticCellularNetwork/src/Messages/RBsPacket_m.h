//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Messages/RBsPacket.msg.
//

#ifndef __OPPORTUNISTICCELLULARNETWORK_RBSPACKET_M_H
#define __OPPORTUNISTICCELLULARNETWORK_RBSPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace opportunisticcellularnetwork {

class RBsPacket;

}  // namespace opportunisticcellularnetwork


namespace opportunisticcellularnetwork {

/**
 * Class generated from <tt>Messages/RBsPacket.msg:3</tt> by opp_msgtool.
 * <pre>
 * message RBsPacket
 * {
 *     int destinationUser;
 *     int usedRBs;
 *     int usedBytes;
 *     simtime_t arrivalTimes[];
 * }
 * </pre>
 */
class RBsPacket : public ::omnetpp::cMessage
{
  protected:
    int destinationUser = 0;
    int usedRBs = 0;
    int usedBytes = 0;
    ::omnetpp::simtime_t *arrivalTimes = nullptr;
    size_t arrivalTimes_arraysize = 0;

  private:
    void copy(const RBsPacket& other);

  protected:
    bool operator==(const RBsPacket&) = delete;

  public:
    RBsPacket(const char *name=nullptr, short kind=0);
    RBsPacket(const RBsPacket& other);
    virtual ~RBsPacket();
    RBsPacket& operator=(const RBsPacket& other);
    virtual RBsPacket *dup() const override {return new RBsPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getDestinationUser() const;
    virtual void setDestinationUser(int destinationUser);

    virtual int getUsedRBs() const;
    virtual void setUsedRBs(int usedRBs);

    virtual int getUsedBytes() const;
    virtual void setUsedBytes(int usedBytes);

    virtual void setArrivalTimesArraySize(size_t size);
    virtual size_t getArrivalTimesArraySize() const;
    virtual ::omnetpp::simtime_t getArrivalTimes(size_t k) const;
    virtual void setArrivalTimes(size_t k, ::omnetpp::simtime_t arrivalTimes);
    virtual void insertArrivalTimes(size_t k, ::omnetpp::simtime_t arrivalTimes);
    [[deprecated]] void insertArrivalTimes(::omnetpp::simtime_t arrivalTimes) {appendArrivalTimes(arrivalTimes);}
    virtual void appendArrivalTimes(::omnetpp::simtime_t arrivalTimes);
    virtual void eraseArrivalTimes(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RBsPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RBsPacket& obj) {obj.parsimUnpack(b);}


}  // namespace opportunisticcellularnetwork


namespace omnetpp {

template<> inline opportunisticcellularnetwork::RBsPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<opportunisticcellularnetwork::RBsPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __OPPORTUNISTICCELLULARNETWORK_RBSPACKET_M_H


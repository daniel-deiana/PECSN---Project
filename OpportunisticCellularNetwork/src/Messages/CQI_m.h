//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Messages/CQI.msg.
//

#ifndef __OPPORTUNISTICCELLULARNETWORK_CQI_M_H
#define __OPPORTUNISTICCELLULARNETWORK_CQI_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace opportunisticcellularnetwork {

class CQI;

}  // namespace opportunisticcellularnetwork


namespace opportunisticcellularnetwork {

/**
 * Class generated from <tt>Messages/CQI.msg:3</tt> by opp_msgtool.
 * <pre>
 * message CQI
 * {
 *     int id;
 *     int CQI_;
 * }
 * </pre>
 */
class CQI : public ::omnetpp::cMessage
{
  protected:
    int id = 0;
    int CQI_ = 0;

  private:
    void copy(const CQI& other);

  protected:
    bool operator==(const CQI&) = delete;

  public:
    CQI(const char *name=nullptr, short kind=0);
    CQI(const CQI& other);
    virtual ~CQI();
    CQI& operator=(const CQI& other);
    virtual CQI *dup() const override {return new CQI(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getId() const;
    virtual void setId(int id);

    virtual int getCQI_() const;
    virtual void setCQI_(int CQI_);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CQI& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CQI& obj) {obj.parsimUnpack(b);}


}  // namespace opportunisticcellularnetwork


namespace omnetpp {

template<> inline opportunisticcellularnetwork::CQI *fromAnyPtr(any_ptr ptr) { return check_and_cast<opportunisticcellularnetwork::CQI*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __OPPORTUNISTICCELLULARNETWORK_CQI_M_H

